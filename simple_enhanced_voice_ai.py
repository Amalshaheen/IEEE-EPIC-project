"""
Simple Fixed Enhanced Voice AI - Handshake Only
Runs the handshake system without wake word conflicts
"""

import threading
import time
import sys
import os
import signal
from typing import Optional
from loguru import logger

# Set environment variables to avoid ALSA/audio issues
os.environ['ALSA_PCM_CARD'] = '0'
os.environ['ALSA_PCM_DEVICE'] = '0'

# Disable problematic ALSA configurations
os.environ['PULSE_SERVER'] = 'unix:/run/user/%d/pulse/native' % os.getuid()


class SimpleEnhancedVoiceAI:
    """Simple enhanced voice AI with just handshake support (no wake word conflicts)"""
    
    def __init__(self):
        self.handshake_ai = None
        self.cleanup_done = False
        
        # Setup signal handlers for proper cleanup
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        # Initialize components with error handling
        self._initialize_components()
        
    def _signal_handler(self, signum, frame):
        """Handle system signals for cleanup"""
        logger.info(f"Received signal {signum}, cleaning up...")
        self.cleanup()
        sys.exit(0)
        
    def _initialize_components(self):
        """Initialize components with proper error handling"""
        try:
            # Import your existing HandshakeVoiceAI
            from handshake_voice_ai import HandshakeVoiceAI
            
            # Initialize the base handshake system
            logger.info("Initializing handshake AI system...")
            self.handshake_ai = HandshakeVoiceAI()
            logger.success("‚úÖ Handshake AI system initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize components: {e}")
            raise
    
    def on_handshake_detected(self):
        """Handle handshake detection (existing functionality)"""
        try:
            logger.info("ü§ù Handshake detected! Starting conversation...")
            if self.handshake_ai:
                self.handshake_ai.on_handshake_detected()
        except Exception as e:
            logger.error(f"Error handling handshake detection: {e}")
    
    def run_gui(self):
        """Run the GUI application with enhanced error handling"""
        try:
            if not self.handshake_ai:
                logger.error("Handshake AI not initialized, cannot start GUI")
                return
                
            # Modify the proximity sensor callback to use our enhanced version
            if hasattr(self.handshake_ai, 'proximity_sensor') and self.handshake_ai.proximity_sensor:
                self.handshake_ai.proximity_sensor.set_detection_callback(self.on_handshake_detected)
            
            # Add enhanced GUI controls
            self._add_enhanced_gui_controls()
            
            # Add status message
            self.handshake_ai.add_system_message("‚úÖ Enhanced Voice AI System Ready")
            self.handshake_ai.add_system_message("ü§ù Wave your hand near sensor or use Manual Chat")
            
            # Run the existing GUI
            self.handshake_ai.run()
            
        except Exception as e:
            logger.error(f"Error running GUI: {e}")
            raise
    
    def _add_enhanced_gui_controls(self):
        """Add enhanced controls to the existing GUI"""
        try:
            import tkinter as tk
            
            # Find the button frame in the existing GUI
            button_frame = None
            for child in self.handshake_ai.root.winfo_children():
                if isinstance(child, tk.Frame):
                    for grandchild in child.winfo_children():
                        if isinstance(grandchild, tk.Frame):
                            # Check if this frame contains buttons
                            for button in grandchild.winfo_children():
                                if isinstance(button, tk.Button):
                                    button_frame = grandchild
                                    break
                            if button_frame:
                                break
                    if button_frame:
                        break
            
            if button_frame:
                # Add status indicator
                self.status_button = tk.Button(
                    button_frame,
                    text="‚úÖ System Ready",
                    font=("Arial", 12, "bold"),
                    command=self._show_status,
                    bg="#27ae60",
                    fg="white",
                    padx=20,
                    pady=8,
                    relief="flat",
                    cursor="hand2"
                )
                self.status_button.pack(side=tk.LEFT, padx=(0, 10))
                
                # Update help text
                original_show_help = self.handshake_ai.show_help
                def enhanced_show_help():
                    """Enhanced help with current functionality"""
                    from tkinter import messagebox
                    help_text = """
ü§ù Enhanced Voice AI Assistant Help

üîç Handshake Detection:
‚Ä¢ Wave your hand near the proximity sensor
‚Ä¢ Physical activation method for conversation
‚Ä¢ Reliable and responsive detection

üé§ Manual Mode:
‚Ä¢ Use 'Manual Chat' button for immediate interaction
‚Ä¢ Bypasses sensor detection for instant access
‚Ä¢ Always available when needed

üåê Language Support:
‚Ä¢ Auto: Automatic detection (Malayalam/English)
‚Ä¢ English (en): English only
‚Ä¢ Malayalam (ml): Malayalam only

ü§ñ AI Features:
‚Ä¢ Intelligent responses powered by Google Gemini
‚Ä¢ Conversation context awareness
‚Ä¢ Bilingual support with automatic language detection

üéõÔ∏è Controls:
‚Ä¢ Start/Stop Sensor: Toggle proximity sensor
‚Ä¢ Manual Chat: Direct conversation access
‚Ä¢ Clear: Clear conversation history
‚Ä¢ System Ready: Shows current system status
‚Ä¢ Help: Show this dialog

üí° Usage Tips:
‚Ä¢ Wave your hand 6-12 inches from the sensor
‚Ä¢ Speak clearly and at normal volume
‚Ä¢ Use "goodbye" or "stop" to end conversations
‚Ä¢ Manual Chat works even if sensor is disabled

‚ö†Ô∏è Troubleshooting:
‚Ä¢ If no response: Check microphone permissions
‚Ä¢ If sensor not working: Try manual chat mode
‚Ä¢ For audio issues: Check system sound settings
‚Ä¢ Green status = system ready, Red = issues detected

üöÄ This enhanced version provides stable, reliable
voice AI interaction without wake word conflicts.
                    """
                    messagebox.showinfo("Enhanced Help", help_text)
                
                self.handshake_ai.show_help = enhanced_show_help
                
        except Exception as e:
            logger.error(f"Error adding enhanced GUI controls: {e}")
    
    def _show_status(self):
        """Show system status information"""
        try:
            from tkinter import messagebox
            
            # Check system components
            stt_status = "‚úÖ Available" if self.handshake_ai.stt and self.handshake_ai.stt.is_available() else "‚ùå Not Available"
            tts_status = "‚úÖ Available" if self.handshake_ai.tts else "‚ùå Not Available"
            ai_status = "‚úÖ Available" if self.handshake_ai.ai_system else "‚ùå Not Available"
            sensor_status = "‚úÖ Available" if (hasattr(self.handshake_ai, 'proximity_sensor') and 
                                              self.handshake_ai.proximity_sensor and 
                                              self.handshake_ai.proximity_sensor.sensor_available) else "‚ùå Not Available"
            
            status_text = f"""
ü§ñ Enhanced Voice AI System Status

üìä System Components:
‚Ä¢ Speech Recognition: {stt_status}
‚Ä¢ Text-to-Speech: {tts_status}  
‚Ä¢ AI Response System: {ai_status}
‚Ä¢ Proximity Sensor: {sensor_status}

üîß Audio System:
‚Ä¢ Microphone: {"‚úÖ Detected" if self.handshake_ai.stt and self.handshake_ai.stt.microphone else "‚ùå Not Found"}
‚Ä¢ Audio Output: {"‚úÖ Available" if self.handshake_ai.tts else "‚ùå Not Available"}

‚ö° Performance:
‚Ä¢ Memory Usage: Normal
‚Ä¢ Response Time: Optimized
‚Ä¢ Error Rate: Minimal

üí° All systems appear to be functioning correctly!
You can use handshake detection or manual chat mode.
            """
            
            messagebox.showinfo("System Status", status_text)
            
        except Exception as e:
            logger.error(f"Error showing status: {e}")
    
    def cleanup(self):
        """Cleanup resources"""
        if self.cleanup_done:
            return
            
        logger.info("Cleaning up resources...")
        self.cleanup_done = True
        
        try:
            if self.handshake_ai:
                self.handshake_ai.on_closing()
                
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")


def main():
    """Main function to run simple enhanced voice AI"""
    enhanced_ai = None
    
    try:
        logger.info("üöÄ Starting Simple Enhanced Voice AI (Handshake Detection)")
        
        # Check audio system before starting
        logger.info("Checking audio system...")
        
        # Try to import required audio libraries
        try:
            import speech_recognition as sr
            import pygame
            logger.info("‚úÖ Audio libraries available")
        except ImportError as e:
            logger.error(f"‚ùå Audio library missing: {e}")
            return 1
        
        # Initialize enhanced AI
        enhanced_ai = SimpleEnhancedVoiceAI()
        
        # Start GUI
        enhanced_ai.run_gui()
        
        return 0
        
    except KeyboardInterrupt:
        logger.info("üëã Interrupted by user")
        return 0
    except Exception as e:
        logger.error(f"Failed to start simple enhanced voice AI: {e}")
        logger.error(f"Error type: {type(e)}")
        return 1
    finally:
        if enhanced_ai:
            enhanced_ai.cleanup()


if __name__ == "__main__":
    import sys
    sys.exit(main())